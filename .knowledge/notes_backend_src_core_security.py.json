{"is_source_file": true, "format": "Python", "description": "This file implements security-related functions for a project, including password hashing, password verification, JWT token creation, and token decoding. It uses external libraries like 'jose' for JWT handling and 'passlib' for password hashing, as well as retrieving configuration settings from a project-specific module.", "external_files": ["src.core.config"], "external_methods": ["get_settings()"], "published": ["get_password_hash", "verify_password", "create_access_token", "decode_token"], "classes": [], "methods": [{"name": "str get_password_hash(password: str)", "description": "Hashes a plaintext password using bcrypt hashing algorithm.", "scope": "", "scopeKind": ""}, {"name": "bool verify_password(plain_password: str, hashed_password: str)", "description": "Verifies a plaintext password against a hashed password.", "scope": "", "scopeKind": ""}, {"name": "str create_access_token(subject: str, expires_delta_minutes: Optional[int] = None)", "description": "Creates a JWT access token with an optional expiration time.", "scope": "", "scopeKind": ""}, {"name": "dict decode_token(token: str)", "description": "Decodes a JWT token to retrieve its payload.", "scope": "", "scopeKind": ""}], "calls": ["get_settings()", "jwt.encode()", "jwt.decode()", "datetime.now()"], "search-terms": ["security", "JWT", "password hash", "passlib", "jose", "create_access_token", "decode_token"], "state": 2, "file_id": 9, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-162065-162075/notes_backend/src/core/security.py", "pattern": "/^def create_access_token(subject: str, expires_delta_minutes: Optional[int] = None) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(subject: str, expires_delta_minutes: Optional[int] = None)"}, {"_type": "tag", "name": "decode_token", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-162065-162075/notes_backend/src/core/security.py", "pattern": "/^def decode_token(token: str) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(token: str)"}, {"_type": "tag", "name": "get_password_hash", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-162065-162075/notes_backend/src/core/security.py", "pattern": "/^def get_password_hash(password: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-162065-162075/notes_backend/src/core/security.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-162065-162075/notes_backend/src/core/security.py", "pattern": "/^def verify_password(plain_password: str, hashed_password: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(plain_password: str, hashed_password: str)"}], "hash": "c3a9260090f8034e87535120403bfd55", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/core/security.py", "fields": [{"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}